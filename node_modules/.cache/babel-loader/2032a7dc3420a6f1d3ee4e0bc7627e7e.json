{"ast":null,"code":"var _jsxFileName = \"D:\\\\IDEA\\\\BlockChain\\\\myapp\\\\src\\\\components\\\\register\\\\RegisterForm.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './RegisterForm.css';\nimport { Form, Input, Button, Icon } from 'antd';\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\n\nclass RegisterForm extends React.Component {\n  // state = {\n  //     confirmDirty: false,\n  //     autoCompleteResult: [],\n  // };\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n          axios.post('', {\n            values\n          }).then(res => {\n            console.log(res);\n\n            if (res.data.state === \"success\") {}\n\n            this.setState({\n              registerFlag: true\n            });\n          }).catch(err => {\n            console.log(err);\n            this.setState({\n              registerFlag: false\n            });\n          });\n        } //如果没有错误，则发送用户信息给后端\n        else {\n            alert(\"注册信息有误\");\n          }\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('两次密码不一致');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    this.state = {\n      registerFlag: false,\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n  }\n\n  render() {\n    if (this.state.registerFlag) {\n      return React.createElement(Link, {\n        to: \"/Login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      });\n    }\n\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 5\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    return React.createElement(Form, Object.assign({}, formItemLayout, {\n      onSubmit: this.handleSubmit,\n      className: \"register-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      className: \"Register\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"WELCOME TO JOIN US\"), React.createElement(Form.Item, {\n      label: \"\\u7528\\u6237\\u540D\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, getFieldDecorator('username', {\n      rules: [{\n        required: true,\n        message: '请输入您的用户名'\n      }, {\n        min: 5,\n        max: 10,\n        message: '用户名长度不在范围内'\n      }, {\n        pattern: new RegExp('^\\\\w+$', 'g'),\n        message: '用户名必须为字母或者数字'\n      }]\n    })(React.createElement(Input, {\n      type: \"text\",\n      placeholder: \"\\u8BF7\\u8F93\\u5165\\u7528\\u6237\\u540D\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"\\u90AE\\u7BB1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      rules: [{\n        type: 'email',\n        message: '邮箱格式不正确'\n      }, {\n        required: true,\n        message: '请输入您的邮箱'\n      }]\n    })(React.createElement(Input, {\n      placeholder: \"请输入您的邮箱\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"\\u5BC6\\u7801\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: '请输入您的密码'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      placeholder: \"请输入您的密码\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"\\u786E\\u8BA4\\u5BC6\\u7801\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      rules: [{\n        required: true,\n        message: '请再次输入您的密码'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      placeholder: \"请再次输入您的密码\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"\\u624B\\u673A\\u53F7\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, getFieldDecorator('phone', {\n      rules: [{\n        required: true,\n        message: '请输入您的手机号'\n      }, {\n        pattern: new RegExp('^1[3456789]\\\\d{9}$', 'g'),\n        message: '用户名必须为字母或者数字'\n      }]\n    })(React.createElement(Input, {\n      placeholder: \"请输入您的手机号\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Register\")));\n  }\n\n}\n\nexport default Form.create()(RegisterForm);","map":{"version":3,"sources":["D:/IDEA/BlockChain/myapp/src/components/register/RegisterForm.js"],"names":["React","ReactDOM","Form","Input","Button","Icon","axios","Link","RegisterForm","Component","constructor","props","handleSubmit","e","preventDefault","form","validateFieldsAndScroll","err","values","console","log","post","then","res","data","state","setState","registerFlag","catch","alert","handleConfirmBlur","value","target","confirmDirty","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","autoCompleteResult","render","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","rules","required","message","min","max","pattern","RegExp","type","validator","create"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'antd/dist/antd.css';\r\nimport './RegisterForm.css'\r\nimport {Form, Input, Button, Icon,} from 'antd';\r\nimport axios from \"axios\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass RegisterForm extends React.Component {\r\n    // state = {\r\n    //     confirmDirty: false,\r\n    //     autoCompleteResult: [],\r\n    // };\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            registerFlag:false,\r\n            confirmDirty: false,\r\n            autoCompleteResult: [],\r\n        };\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFieldsAndScroll((err, values) => {\r\n            if (!err) {\r\n                console.log('Received values of form: ', values);\r\n                axios.post('', {values})\r\n                    .then(res => {\r\n                        console.log(res);\r\n                        if(res.data.state === \"success\"){\r\n                            \r\n                        }\r\n                        this.setState({\r\n                            registerFlag:true\r\n                        })\r\n                    })\r\n                    .catch(err => {\r\n                        console.log(err);\r\n                        this.setState({\r\n                            registerFlag:false\r\n                        })\r\n                    });\r\n            }\r\n            //如果没有错误，则发送用户信息给后端\r\n            else{\r\n                alert(\"注册信息有误\");\r\n            }\r\n        });\r\n    };\r\n\r\n    handleConfirmBlur = e => {\r\n        const { value } = e.target;\r\n        this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n    };\r\n\r\n    compareToFirstPassword = (rule, value, callback) => {\r\n        const { form } = this.props;\r\n        if (value && value !== form.getFieldValue('password')) {\r\n            callback('两次密码不一致');\r\n        } else {\r\n            callback();\r\n        }\r\n    };\r\n\r\n    validateToNextPassword = (rule, value, callback) => {\r\n        const { form } = this.props;\r\n        if (value && this.state.confirmDirty) {\r\n            form.validateFields(['confirm'], { force: true });\r\n        }\r\n        callback();\r\n    };\r\n\r\n\r\n\r\n    render() {\r\n        if(this.state.registerFlag){\r\n            return <Link to=\"/Login\"/>\r\n        }\r\n        const { getFieldDecorator } = this.props.form;\r\n        const formItemLayout = {\r\n            labelCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 5 },\r\n            },\r\n            wrapperCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 16 },\r\n            },\r\n        };\r\n        const tailFormItemLayout = {\r\n            wrapperCol: {\r\n                xs: {\r\n                    span: 24,\r\n                    offset: 0,\r\n                },\r\n                sm: {\r\n                    span: 16,\r\n                    offset: 8,\r\n                },\r\n            },\r\n        };\r\n\r\n        return (\r\n            <Form {...formItemLayout}\r\n                  onSubmit={this.handleSubmit}\r\n                  className=\"register-form\">\r\n                <h2 className={\"Register\"}>WELCOME TO JOIN US</h2>\r\n                <Form.Item label=\"用户名\">\r\n                    {getFieldDecorator('username', {\r\n                        rules: [\r\n                            {\r\n                                required: true,\r\n                                message: '请输入您的用户名'\r\n                            },\r\n                            {\r\n                                min:5,max:10,\r\n                                message:'用户名长度不在范围内'\r\n                            },\r\n                            {\r\n                                pattern:new RegExp('^\\\\w+$','g'),\r\n                                message:'用户名必须为字母或者数字'\r\n                            }\r\n                        ],\r\n                    })(\r\n                        <Input type=\"text\" placeholder=\"请输入用户名\"/>,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item label=\"邮箱\">\r\n                    {getFieldDecorator('email', {\r\n                        rules: [\r\n                            {\r\n                                type: 'email',\r\n                                message: '邮箱格式不正确',\r\n                            },\r\n                            {\r\n                                required: true,\r\n                                message: '请输入您的邮箱',\r\n                            },\r\n                        ],\r\n                    })(<Input placeholder={\"请输入您的邮箱\"}/>)}\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"密码\" hasFeedback>\r\n                    {getFieldDecorator('password', {\r\n                        rules: [\r\n                            {\r\n                                required: true,\r\n                                message: '请输入您的密码',\r\n                            },\r\n                            {\r\n                                validator: this.validateToNextPassword,\r\n                            },\r\n                        ],\r\n                    })(<Input.Password placeholder={\"请输入您的密码\"}/>)}\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"确认密码\" hasFeedback>\r\n                    {getFieldDecorator('confirm', {\r\n                        rules: [\r\n                            {\r\n                                required: true,\r\n                                message: '请再次输入您的密码',\r\n                            },\r\n                            {\r\n                                validator: this.compareToFirstPassword,\r\n                            },\r\n                        ],\r\n                    })(<Input.Password onBlur={this.handleConfirmBlur} placeholder={\"请再次输入您的密码\"}/>)}\r\n                </Form.Item>\r\n\r\n\r\n                <Form.Item label=\"手机号\">\r\n                    {getFieldDecorator('phone', {\r\n                        rules: [\r\n                            {\r\n                                required: true,\r\n                                message: '请输入您的手机号'\r\n                            },\r\n                            {\r\n                                pattern:new RegExp('^1[3456789]\\\\d{9}$','g'),\r\n                                message:'用户名必须为字母或者数字'\r\n                            }\r\n                            ],\r\n                    })(<Input placeholder={\"请输入您的手机号\"}/>)}\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailFormItemLayout}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Register\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form.create()(RegisterForm);"]},"metadata":{},"sourceType":"module"}